love.mousereleased(x, y, button, istouch, presses)
love.keypressed(key, isrepeat)
love.keyreleased(key, scancode)
love.directorydropped(path)
love.displayrotated(index, orientation)
love.draw()
love.errorhandler(msg)
love.filedropped(file)
love.focus(focus)
love.gamepadaxis(joystick, axis, value)
love.gamepadpressed(joystick, button)
love.gamepadreleased(joystick, button)
love.joystickadded(joystick)
love.joystickaxis(joystick, axis, value)
love.joystickhat(joystick, hat, direction)
love.joystickpressed(joystick, button)
love.joystickreleased(joystick, button)
love.joystickremoved(joystick)
love.load(arg, unfilteredArg)
love.lowmemory()
love.mousefocus(focus)
love.mousemoved(x, y, dx, dy, istouch)
love.mousepressed(x, y, button, istouch, presses)
r = love.quit()
love.resize(w, h)
mainLoop = love.run()
love.textedited(text, start, length)
love.textinput(text)
love.threaderror(thread, errorstr)
love.touchmoved(id, x, y, dx, dy, pressure)
love.touchpressed(id, x, y, dx, dy, pressure)
love.touchreleased(id, x, y, dx, dy, pressure)
love.update(dt)
love.visible(visible)
love.wheelmoved(x, y)
font = love.graphics.setNewFont(size [12])
love.graphics.stencil(stencilfunction, action ['replace'], value [1], keepvalues [false])
love.graphics.rectangle(mode, x, y, width, height, rx, ry [rx], segments [nil])
love.graphics.printf(text, x, y, limit, align ['left'], r [0], sx [1], sy [sx], ox [0], oy [0], kx [0], ky [0])
love.graphics.print(coloredtext, x [0], y [0], angle [0], sx [1], sy [sx], ox [0], oy [0], kx [0], ky [0])
love.graphics.present()
love.graphics.polygon(mode, ...)
love.graphics.points(points)
love.graphics.line(points)
love.graphics.flushBatch()
love.graphics.ellipse(mode, x, y, radiusx, radiusy)
love.graphics.drawLayer(texture, layerindex, transform)
love.graphics.draw(drawable, x [0], y [0], r [0], sx [1], sy [sx], ox [0], oy [0], kx [0], ky [0])
love.graphics.discard(discardcolors, discardstencil [true])
love.graphics.clear()
love.graphics.circle(mode, x, y, radius, segments)
love.graphics.arc(drawmode, x, y, radius, angle1, angle2, segments [10])
love.graphics.translate(dx, dy)
screenX, screenY = love.graphics.transformPoint(globalX, globalY)
love.graphics.shear(kx, ky)
love.graphics.scale(sx, sy [sx])
love.graphics.rotate(angle)
love.graphics.push(stack)
love.graphics.pop()
love.graphics.origin()
globalX, globalY = love.graphics.inverseTransformPoint(screenX, screenY)
status, message = love.graphics.validateShader(gles, pixelcode, vertexcode)
image = love.graphics.newImage(compressedImageData, flags)
width = love.graphics.getWidth()
pixelwidth = love.graphics.getPixelWidth()
pixelheight = love.graphics.getPixelHeight()
height = love.graphics.getHeight()
width, height = love.graphics.getDimensions()
scale = love.graphics.getDPIScale()
r, g, b, a = love.graphics.getBackgroundColor()
r, g, b, a = love.graphics.getColor()
gammacorrect = love.graphics.isGammaCorrect()
active = love.graphics.isActive()
love.graphics.reset()
wireframe = love.graphics.isWireframe()
love.graphics.setBackgroundColor(red, green, blue, alpha [1])
love.graphics.setColor(rgba)
love.graphics.setWireframe(enable)
love.graphics.setScissor(x, y, width, height)
size = love.graphics.getPointSize()
love.graphics.setPointSize(size)
width = love.graphics.getLineWidth()
love.graphics.setLineWidth(width)
love.graphics.setLineStyle(style)
love.graphics.setLineJoin(join)
love.keyboard.setTextInput(enable, x, y, w, h)
love.keyboard.setKeyRepeat(enable)
down = love.keyboard.isScancodeDown(scancode, ...)
down = love.keyboard.isDown(key)
enabled = love.keyboard.hasTextInput()
supported = love.keyboard.hasScreenKeyboard()
enabled = love.keyboard.hasKeyRepeat()
scancode = love.keyboard.getScancodeFromKey(key)
key = love.keyboard.getKeyFromScancode(scancode)
touches = love.touch.getTouches()
pressure = love.touch.getPressure(id)
x, y = love.touch.getPosition(id)
love.window.close()
scale = love.window.getDPIScale()
fullscreen, fstype = love.window.getFullscreen()
name = love.window.getDisplayName(displayindex [1])
orientation = love.window.getDisplayOrientation(displayindex [nil])
focus = love.window.hasFocus()
title = love.window.getTitle()
x, y, displayindex = love.window.getPosition()
love.window.setTitle(title)
love.window.setPosition(x, y, displayindex [1])
success = love.window.setMode(width, height, flags)
success = love.window.setFullscreen(fullscreen)
love.window.restore()
love.window.minimize()
love.window.maximize()
visible = love.window.isVisible()
open = love.window.isOpen()
minimized = love.window.isMinimized()
maximized = love.window.isMaximized()
focus = love.window.hasMouseFocus()
count = love.window.getDisplayCount()
love.system.vibrate(seconds [0.5])
love.system.setClipboardText(text)
success = love.system.openURL(url)
processorCount = love.system.getProcessorCount()
osString = love.system.getOS()
text = love.system.getClipboardText()
backgroundmusic = love.system.hasBackgroundMusic()
dt = love.timer.step()
love.timer.sleep(s)
time = love.timer.getTime()
fps = love.timer.getFPS()
dt = love.timer.getDelta()
delta = love.timer.getAverageDelta()
triangles = love.math.triangulate(polygon)
love.math.setRandomState(state)
love.math.setRandomSeed(seed)
number = love.math.randomNormal(stddev [1], mean [0])
number = love.math.random(max)
value = love.math.noise(x, y, z, w)
convex = love.math.isConvex(vertices)
state = love.math.getRandomState()
low, high = love.math.getRandomSeed()
rng = love.math.newRandomGenerator(seed)
love.mouse.setY(y)
love.mouse.setX(x)
love.mouse.setVisible(visible)
love.mouse.setRelativeMode(enable)
love.mouse.setPosition(x, y)
love.mouse.setGrabbed(grab)
love.mouse.setCursor()
cursor = love.mouse.newCursor(filename, hotx [0], hoty [0])
visible = love.mouse.isVisible()
grabbed = love.mouse.isGrabbed()
down = love.mouse.isDown(button, ...)
y = love.mouse.getY()
x = love.mouse.getX()
cursor = love.mouse.getSystemCursor(ctype)
enabled = love.mouse.getRelativeMode()
x, y = love.mouse.getPosition()
cursor = love.mouse.getCursor()
love.physics.setMeter(scale)
world = love.physics.newWorld(xg [0], yg [0], sleep [true])
joint = love.physics.newWheelJoint(body1, body2, x1, y1, x2, y2, ax, ay, collideConnected [false])
joint = love.physics.newWeldJoint(body1, body2, x1, y1, x2, y2, collideConnected [false], referenceAngle [0])
shape = love.physics.newRectangleShape(width, height)
shape = love.physics.newPolygonShape(vertices)
joint = love.physics.newMouseJoint(body, x, y)
distance, x1, y1, x2, y2 = love.physics.getDistance(fixture1, fixture2)
scale = love.physics.getMeter()
body = love.physics.newBody(world, x [0], y [0], type ['static'])
shape = love.physics.newCircleShape(x, y, radius)
shape = love.physics.newChainShape(loop, x1, y1, x2, y2, ...)
shape = love.physics.newEdgeShape(x1, y1, x2, y2)
fixture = love.physics.newFixture(body, shape, density [1])
love.audio.setDistanceModel(model)
model = love.audio.getDistanceModel()
love.audio.setDopplerScale(scale)
success = love.audio.setEffect(name, settings)
success = love.audio.setMixWithSystem(mix)
love.audio.setOrientation(fx, fy, fz, ux, uy, uz)
love.audio.setPosition(x, y, z)
love.audio.setVelocity(x, y, z)
love.audio.setVolume(volume)
love.audio.stop(source)
love.audio.pause(source, ...)
source = love.audio.newSource(data, type)
supported = love.audio.isEffectsSupported()
volume = love.audio.getVolume()
x, y, z = love.audio.getVelocity()
devices = love.audio.getRecordingDevices()
x, y, z = love.audio.getPosition()
fx, fy, fz, ux, uy, uz = love.audio.getOrientation()
maximum = love.audio.getMaxSourceEffects()
maximum = love.audio.getMaxSceneEffects()
settings = love.audio.getEffect(name)
scale = love.audio.getDopplerScale()
count = love.audio.getActiveSourceCount()
effects = love.audio.getActiveEffects()
success, errormsg = love.filesystem.append(name, data, size [all])
enable = love.filesystem.areSymlinksEnabled()
success = love.filesystem.createDirectory(name)
files = love.filesystem.getDirectoryItems(dir, callback)
name = love.filesystem.getIdentity()
info = love.filesystem.getInfo(path, filtertype, info)
paths = love.filesystem.getRequirePath()
realdir = love.filesystem.getRealDirectory(filepath)
dir = love.filesystem.getSaveDirectory()
path = love.filesystem.getSource()
path = love.filesystem.getUserDirectory()
cwd = love.filesystem.getWorkingDirectory()
love.filesystem.init(appname)
iterator = love.filesystem.lines(name)
chunk, errormsg = love.filesystem.load(name)
success = love.filesystem.mount(data, archivename, mountpoint, appendToPath [false])
file, errorstr = love.filesystem.newFile(filename, mode)
contents, size, contents, error = love.filesystem.read(name, size [all])
success = love.filesystem.remove(name)
love.filesystem.setIdentity(name)
love.filesystem.setRequirePath(paths)
love.filesystem.setSource(path)
love.filesystem.setSymlinksEnabled(enable)
success = love.filesystem.unmount(archive)
success, message = love.filesystem.write(name, data, size [all])
